-- 01. Employees with Salary Above 35000

CREATE  PROCEDURE usp_GetEmployeesSalaryAbove35000
AS 
BEGIN
	SELECT 
		FirstName
	   ,LastName
	FROM Employees
	WHERE Salary > 35000
END

-- 02. Employees with Salary Above Number

CREATE PROCEDURE usp_GetEmployeesSalaryAboveNumber @Salary DECIMAL(18,4)
AS 
BEGIN
	SELECT 
		FirstName
	   ,LastName
	FROM Employees
	WHERE Salary >= @Salary
END

-- 03. Town Names Starting With

CREATE PROC usp_GetTownsStartingWith(@searchedString NVARCHAR(50))
AS
BEGIN
     DECLARE @stringCount int = LEN(@searchedString)
SELECT [Name] FROM Towns
WHERE LEFT([Name],@stringCount) = @searchedString
END

-- 04. Employees from Town

CREATE PROC usp_GetEmployeesFromTown @townName NVARCHAR(50)
AS
BEGIN
	SELECT 
		FirstName
	   ,LastName
	FROM Employees AS [e]
	JOIN Addresses AS [a] ON e.AddressID = a.AddressID
	JOIN Towns AS [t] ON a.TownID = t.TownID
	WHERE t.[Name] = @townName
END

-- 05. Salary Level Function

CREATE FUNCTION ufn_GetSalaryLevel (@salary DECIMAL(18,4))
RETURNS VARCHAR(10)
AS
BEGIN
	DECLARE @SalaryLevel VARCHAR(10)
		IF(@salary < 30000)
			SET @SalaryLevel = 'Low'
		ELSE If(@salary BETWEEN 30000 AND 50000)
			SET @SalaryLevel = 'Average'
		ELSE
			SET @SalaryLevel = 'High'
RETURN @SalaryLevel
END 

-- 06. Employees by Salary Level

CREATE PROC usp_EmployeesBySalaryLevel(@SalaryLevel VARCHAR(10))
AS
SELECT 
	FirstName
   ,LastName
FROM Employees
WHERE [dbo].[ufn_GetSalaryLevel](Salary) = @SalaryLevel

-- 07. Define Function
GO

CREATE FUNCTION ufn_IsWordComprised(@setOfLetters VARCHAR(50), @word VARCHAR(50)) 
RETURNS BIT
AS
BEGIN
	DECLARE @currIndex INT = 1
	WHILE (@currIndex <= LEN(@word))
		BEGIN
			DECLARE @currentLetter VARCHAR(1) = SUBSTRING(@word, @currIndex,1)

			IF(CHARINDEX(@currentLetter, @setOfLetters)) = 0
			BEGIN
				RETURN 0;
			END

			SET @currIndex += 1
		END
	RETURN 1
END

GO

-- 08. *Delete Employees and Departments

--CREATE PROC usp_DeleteEmployeesFromDepartment (@departmentId INT) 
--AS
--BEGIN	
--	DECLARE @employeesToDelete TABLE ([ID] INT)

--	INSERT INTO @employeesToDelete
--		SELECT EmployeeID
--		FROM Employees
--		WHERE DepartmentID = @departmentId
	
--	DELETE 
--	FROM EmployeesProjects
--	WHERE EmployeeID IN 
--		(SELECT *
--		 FROM @employeesToDelete )

--	ALTER TABLE Departments
--	ALTER COLUMN ManagerID INT
	
--	UPDATE Departments
--		SET ManagerID = NULL
--		WHERE ManagerID IN 
--		(SELECT *
--		 FROM @employeesToDelete)

--	UPDATE Employees
--		SET ManagerID = NULL
--		WHERE ManagerID IN
--		(SELECT *
--		 FROM @employeesToDelete)

--	DELETE FROM Employees
--	WHERE DepartmentID = @departmentId

--	DELETE FROM Departments
--	WHERE DepartmentID = @departmentId
--END	

-- 09. Find Full Name
GO

CREATE PROC usp_GetHoldersFullName
AS
BEGIN
	SELECT 
		CONCAT_WS(' ', FirstName, LastName) AS [Full Name]
	FROM AccountHolders
END

-- 10. People with Balance Higher Than
GO

CREATE PROC usp_GetHoldersWithBalanceHigherThan (@totalMoney Money)
AS
BEGIN
	SELECT
	SUBQ.FirstName
   ,SUBQ.LastName
	FROM (	
		SELECT
			FirstName
		   ,LastName
		   ,SUM(Balance) AS [Sum]
		FROM AccountHolders AS [ah]
		JOIN Accounts AS [a] ON ah.Id = a.AccountHolderId
		GROUP BY ah.FirstName,ah.LastName) AS [SUBQ]
WHERE SUBQ.[Sum] > @totalMoney
ORDER BY SUBQ.FirstName, SUBQ.LastName
END

-- 11. Future Value Function
GO

CREATE FUNCTION ufn_CalculateFutureValue (@sum DECIMAL, @interest FLOAT, @years INT)
RETURNS MONEY
AS
BEGIN
RETURN @sum * POWER(1 + @interest, @years) 
END

-- 12. Calculating Interest
GO

CREATE PROC usp_CalculateFutureValueForAccount(@accId INT, @interest FLOAT)
AS
BEGIN
	SELECT 
		a.Id
	   ,ah.FirstName
	   ,ah.LastName
	   ,a.Balance AS [Current Balance]
	   ,dbo.ufn_CalculateFutureValue(a.Balance,@interest,5)
	FROM AccountHolders AS [ah]
	JOIN Accounts as [a] ON ah.Id = a.AccountHolderId
	WHERE a.Id = @accId
END

-- 13. *Cash in User Games Odd Rows

