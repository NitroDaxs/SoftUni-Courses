-- 01. One-To-One Relationship

CREATE TABLE Persons(
	PersonID INT NOT NULL
   ,FirstName NVARCHAR(30)
   ,Salary DECIMAL
   ,PassportID INT 
)

CREATE TABLE Passports(
	PassportID INT NOT NULL
   ,PassportNumber NVARCHAR(8)
)

INSERT INTO Persons
VALUES (1,'Roberto', 43300.00,102)
,(2,'Tom',56100.00,103)
,(3,'Yana',60200.00,101)

INSERT INTO Passports
VALUES (101, 'N34FG21B')
,(102,'K65LO4R7')
,(103,'ZE657QP2')

ALTER TABLE Persons
ADD PRIMARY KEY (PersonID)

ALTER TABLE Passports
ADD PRIMARY KEY (PassportID)

ALTER TABLE Persons
ADD FOREIGN KEY (PassportID) REFERENCES Passports(PassportID)

-- 02. One-To-Many Relationship

CREATE TABLE Manufacturers(
	ManufacturerID INT PRIMARY KEY IDENTITY
   ,[Name] NVARCHAR(50) NOT NULL
   ,EstablishedOn DATETIME2 NOT NULL
)

CREATE TABLE Models(
	ModelID INT PRIMARY KEY IDENTITY(101,1)
   ,[Name] NVARCHAR(50) NOT NULL
   ,ManufacturerID INT FOREIGN KEY REFERENCES Manufacturers(ManufacturerID) 
)

INSERT INTO Manufacturers
VALUES
('BMW', '07/03/1916')
,('Tesla', '01/01/2003')
,('Lada', '01/05/1966')

INSERT INTO Models
VALUES
('X1',1)
,('i6',1)
,('Model S',2)
,('Model X',2)
,('Model 3',2)
,('Nova',3)

-- 03. Many-To-Many Relationship

CREATE TABLE Students(
	StudentID INT PRIMARY KEY IDENTITY
   ,[Name] NVARCHAR(50) NOT NULL
)

INSERT INTO Students
VALUES
('Mila')
,('Toni')
,('Ron')

CREATE TABLE Exams(
	ExamID INT PRIMARY KEY IDENTITY(101,1)
   ,[Name] NVARCHAR(50) NOT NULL
)

INSERT INTO Exams
VALUES
('SpringMVC')
,('Neo4j')
,('Oracle 11g')

CREATE TABLE StudentsExams(
	StudentID INT
   ,ExamID INT
   ,PRIMARY KEY (StudentID,ExamID)
   ,CONSTRAINT FK_StudentID FOREIGN KEY (StudentID)
    REFERENCES Students(StudentID)
   ,CONSTRAINT FK_ExamID FOREIGN KEY (ExamID)
    REFERENCES Exams(ExamID)
)

-- 04. Self-Referencing

CREATE TABLE Teachers(
	TeacherID INT PRIMARY KEY IDENTITY(101,1)
   ,[Name] NVARCHAR(50)
   ,ManagerID INT REFERENCES Teachers(TeacherID)
)

INSERT INTO Teachers
VALUES
('John',NULL)
,('Maya',106)
,('Silvia', 106)
,('Ted', 105)
,('Mark' ,101)
,('Greta', 101)

-- 05. Online Store Database

CREATE TABLE Cities(
	CityID INT PRIMARY KEY IDENTITY	
   ,[NAME] NVARCHAR(100) NOT NULL
)

CREATE TABLE Customers(
	CustomerID INT PRIMARY KEY IDENTITY
   ,[Name] NVARCHAR(50) NOT NULL
   ,Birtday DATETIME2
   ,CityID INT FOREIGN KEY REFERENCES Cities(CityID)
)

CREATE TABLE Orders(
	OrderID INT PRIMARY KEY IDENTITY
   ,CustomerID INT FOREIGN KEY REFERENCES Customers(CustomerID)
)

CREATE TABLE ItemTypes(
	ItemTypeID INT PRIMARY KEY IDENTITY
   ,[Name] NVARCHAR(100) NOT NULL
)

CREATE TABLE Items(
	ItemID INT PRIMARY KEY IDENTITY
   ,[Name] NVARCHAR(100) NOT NULL
   ,ItemTypeID INT FOREIGN KEY REFERENCES ItemTypes(ItemTypeID)
)

CREATE TABLE OrderItems(
    OrderID INT
   ,ItemID INT
   ,Primary Key(OrderID,ItemId)
   ,CONSTRAINT FK_OrderID FOREIGN KEY (OrderID)
    REFERENCES Orders(OrderID)
   ,CONSTRAINT FK_ItemID FOREIGN KEY (ItemID)
    REFERENCES Items(ItemId)
)

-- 06. University Database

CREATE TABLE Subjects(
	SubjectID INT PRIMARY KEY IDENTITY
   ,SubjectName NVARCHAR(100) NOT NULL
)

CREATE TABLE Majors(
	MajorsID INT PRIMARY KEY IDENTITY
   ,[Name] NVARCHAR(100) NOT NULL
)

CREATE TABLE Students(
	StudentID INT PRIMARY KEY IDENTITY
   ,StudentNumber NVARCHAR(10) NOT NULL
   ,StudentName NVARCHAR(100) NOT NULL
   ,MajorID INT FOREIGN KEY REFERENCES Majors(MajorsID)
)

CREATE TABLE Payments(
	PaymentID INT PRIMARY KEY IDENTITY
   ,PaymentDate DATETIME2 NOT NULL
   ,PaymentAmount DECIMAL NOT NULL
   ,StudentID INT FOREIGN KEY REFERENCES Students(StudentID)
)

CREATE TABLE Agenda(
	StudentID INT
   ,SubjectID INT
   ,PRIMARY KEY(StudentID,SubjectID)
   ,CONSTRAINT FK_StudentID FOREIGN KEY (StudentID)
   REFERENCES Students(StudentID)
   ,CONSTRAINT FK_SubjectID FOREIGN KEY (SubjectID)
   REFERENCES Subjects(SubjectID)
)

-- 09. *Peaks in Rila

SELECT m.MountainRange, p.PeakName, p.Elevation
FROM Mountains AS m
JOIN Peaks AS P ON p.MountainId=m.Id
WHERE MountainRange = 'Rila'
ORDER BY Elevation DESC

SELECT m.MountainRange, PeakName, Elevation 
FROM Peaks AS p
JOIN Mountains AS m on m. Id = p.MountainID
WHERE MountainRange = 'Rila'
ORDER BY Elevation DESC
