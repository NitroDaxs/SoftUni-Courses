-- 00.Create DB

CREATE DATABASE [Service]

-- 01. DDL

CREATE TABLE Users
(
	Id INT PRIMARY KEY IDENTITY
   ,Username VARCHAR(30) UNIQUE NOT NULL
   ,[Password] VARCHAR(50) NOT NULL
   ,[Name] VARCHAR(50) NULL 
   ,Birthdate DATETIME NULL
   ,Age INT NULL
   ,Email VARCHAR(50) NOT NULL
)

CREATE TABLE Departments
(
	Id INT PRIMARY KEY IDENTITY
   ,[Name] VARCHAR(50) NOT NULL 
)

CREATE TABLE Employees
(
	Id INT PRIMARY KEY IDENTITY
   ,FirstName VARCHAR(25) NULL
   ,LastName VARCHAR(25) NULL
   ,Birthdate DATETIME NULL
   ,Age INT NULL
   ,DepartmentId INT FOREIGN KEY REFERENCES Departments(Id)
)

CREATE TABLE Categories
(
	Id INT PRIMARY KEY IDENTITY
   ,[Name] VARCHAR(50) NOT NULL
   ,DepartmentId INT FOREIGN KEY REFERENCES Departments(Id) NOT NULL
)

CREATE TABLE [Status]
(	
	Id INT PRIMARY KEY IDENTITY
   ,[Label] VARCHAR(20) NOT NULL
)

CREATE TABLE Reports
(
	Id INT PRIMARY KEY IDENTITY
   ,CategoryId INT FOREIGN KEY REFERENCES Categories(Id) NOT NULL
   ,StatusId INT FOREIGN KEY REFERENCES [Status](Id) NOT NULL
   ,OpenDate DATETIME NOT NULL
   ,CloseDate DATETIME NULL 
   ,[Description] VARCHAR(200) NOT NULL
   ,UserId INT FOREIGN KEY REFERENCES Users(Id) NOT NULL
   ,EmployeeId INT FOREIGN KEY REFERENCES Employees(Id) NULL
)

-- 02. Insert

INSERT INTO  Employees(FirstName,LastName,Birthdate,DepartmentId)
VALUES
	 ('Marlo', 'O''Malley', '1958-09-21', 1)
    ,('Niki', 'Stanaghan', '1969-11-26', 4)
    ,('Ayrton', 'Senna', '1960-03-21', 9)
    ,('Ronnie', 'Peterson', '1944-02-14', 9)
    ,('Giovanna', 'Amati', '1959-07-20', 5)

INSERT INTO Reports(CategoryId,StatusId,OpenDate,CloseDate,[Description],UserId,EmployeeId)
VALUES
  (1, 1, '2017-04-13', NULL, 'Stuck Road on Str.133', 6, 2)
  ,(6, 3, '2015-09-05', '2015-12-06', 'Charity trail running', 3, 5)
  ,(14, 2, '2015-09-07', NULL, 'Falling bricks on Str.58', 5, 2)
  ,(4, 3, '2017-07-03', '2017-07-06', 'Cut off streetlight on Str.11', 1, 1)

-- 03. Update

UPDATE Reports
SET CloseDate = GETDATE()
WHERE CloseDate IS NULL

-- 04. Delete

DELETE Reports
WHERE StatusId = 4

-- 05. Unassigned Reports

SELECT 
	[Description]
   ,FORMAT(OpenDate, 'dd-MM-yyyy') as asd
FROM Reports
WHERE EmployeeId IS NULL
ORDER BY OpenDate, [Description]

-- 06. Reports & Categories

SELECT 
	r.[Description]
   ,c.[Name]
FROM Reports AS r
JOIN Categories AS c ON r.CategoryId = c.Id
ORDER BY r.[Description],c.[Name]

-- 07. Most Reported Category

SELECT TOP(5)
	c.[Name]
   ,COUNT(CategoryId)
FROM Reports AS r
JOIN Categories AS c ON r.CategoryId =c.Id
GROUP BY c.[Name]
ORDER BY COUNT(*) DESC,c.[Name]

-- 08. Birthday Report

SELECT 
	u.Username
   ,c.[Name]
FROM Reports AS r
JOIN Users AS u ON r.UserId = u.Id
JOIN Categories AS c ON r.CategoryId = c.Id
WHERE MONTH(u.Birthdate) = MONTH(r.OpenDate)
AND DAY(u.Birthdate) = DAY(r.OpenDate)
ORDER BY u.Username, c.[Name]

-- 09. User per Employee

SELECT
	CONCAT(e.FirstName, ' ', e.LastName) AS FullName
   ,COUNT(r.UserId) AS UsersCount
FROM Reports AS r
FULL OUTER JOIN Employees AS e ON r.EmployeeId = e.Id
WHERE e.FirstName IS NOT NULL
GROUP BY CONCAT(e.FirstName, ' ', e.LastName)
ORDER BY UsersCount DESC , FullName 

-- 10. Full Info

SELECT
	CASE 
		WHEN COALESCE(e.FirstName,e.LastName) IS NOT NULL
			THEN CONCAT(e.FirstName,' ',e.LastName)
		ELSE 'None'
	END AS Employee,
	ISNULL(d.Name,'None') AS Department,
	ISNULL(c.Name,'None') AS Category,
	ISNULL(r.Description,'None'),
	ISNULL(CONVERT(VARCHAR, r.OpenDate, 104),'None') AS [OpenDate],
	ISNULL(s.Label,'None') AS STATUS,
	ISNULL(u.Name, 'None') AS [USER]
FROM Reports r 
LEFT JOIN Employees e ON e.Id=r.EmployeeId
LEFT JOIN Categories c ON c.Id=r.CategoryId
LEFT JOIN Departments d ON d.Id=e.DepartmentId
LEFT JOIN STATUS s ON s.Id=r.StatusId
LEFT JOIN Users u ON u.Id=r.UserId
ORDER BY Employee DESC, Department,Category,[Description],OpenDate,[Status],[User] 

-- 11. Hours to Complete
GO

CREATE FUNCTION udf_HoursToComplete(@StartDate DATETIME, @EndDate DATETIME)
RETURNS INT
AS
BEGIN
RETURN (ISNULL(DATEDIFF(hour,@StartDate,@EndDate),0) )
END

-- 12. Assign Employee
GO

CREATE PROC usp_AssignEmployeeToReport(@EmployeeId INT, @ReportId INT)
AS
BEGIN
	DECLARE @employeeDp INT
		SET @employeeDp = (SELECT DepartmentId FROM Employees WHERE Id = @EmployeeId)
	DECLARE @categoryId INT
		SET @categoryId = (SELECT CategoryId FROM Reports WHERE Id = @ReportId)
	DECLARE @reportCategoryDp INT
		SET @reportCategoryDp = (SELECT DepartmentId FROM Categories WHERE Id = @categoryId)

	IF(@employeeDp != @reportCategoryDp)
			THROW 50001, 'Employee doesn''t belong to the appropriate department!', 1
			
	UPDATE Reports
		SET EmployeeId = @EmployeeId
END
